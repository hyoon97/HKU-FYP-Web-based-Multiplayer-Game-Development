#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('testing:server');
var http = require('http');


var mms = require('../config/mms')
mms.matchmaker.start();

const bcrypt = require("bcryptjs");
const User = require("../model/User");
var isemail = require('isemail');
var InitiateMongoServer = require("../config/db");

InitiateMongoServer();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.IO
 */

var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


// let room = 0;

let playerID = 0;
var playerColor = function(){
    return (!(playerID % 2)) ? "red" : "blue";
}

var roomID = function(){
    return "room" + Math.floor(playerID / 2);
}

let rooms = 0;

var userToSocket = new Map;
var socketToUser = new Map;
var roomToSockets = new Map;

require('socketio-auth')(io, {
    authenticate: async (socket, data, callback) => {
        if (data.newUserReg === true) { // if new user wants to register
            var username = data.username;
            var password = data.password;
            var confirm = data.confirm;
            var email = data.email;

            if (username === "")
                return callback(new Error('Username field must be filled'));
            if (password.length < 8)
                return callback(new Error('Password must be at least 8 characters'));
            if (password != confirm)
                return callback(new Error('Two password inputs do not match'));
            if (isemail.validate(email, {errorLevel: true}) > 0)
                return callback(new Error('Invalid email'));

            try {
                let user = await User.findOne({
                    email
                });
                if (user)
                    return callback(new Error('A user with this email has already been registered'));

                user = new User({
                    username,
                    email,
                    password
                });

                const salt = await bcrypt.genSalt(10);
                user.password = await bcrypt.hash(password, salt);
          
                await user.save();

                return callback(null, true);

            } catch (e) {

            }   
        } else { // if registered user wants to log in
            //get credentials sent by the client
            var username = data.username;
            var password = data.password;
   
            try {
                let user = await User.findOne({
                    username
                });

                if (!user)
                    return callback(new Error("User not found"));

                const isMatch = await bcrypt.compare(password, user.password);
                if (!isMatch)
                    return callback(new Error("Incorrect Password"));
                else
                    return callback(null, true);

            } catch (e) {
                console.error(e);
            }
        }

    }
});

io.on('connection', function(socket){
    socket.on('initialize', ()=>{ //currently not doing anything
        // socket.playerColor = playerColor();
        // socket.roomID = roomID();
        // socket.units = [];
        var player = {
            id: playerID % 2,
            color: socket.playerColor,
            room: socket.roomID 
        };
        socket.join(socket.roomID)
        socket.emit('initialize player', player);
        playerID = playerID + 1; 
    })
    // socket.on('create team', ()=>{
    //     var player = {
    //         id: playerID % 2,
    //         color: socket.playerColor,
    //         room: socket.roomID 
    //     };
    //     socket.join(socket.roomID)
    //     socket.emit('initialize player', player);
    //     playerID = playerID + 1; 
    // });

    // Start a game using MMS
    socket.on('quickplay', async (data) => {
        var username = data.username;
        var user;
        try {
            let user = await User.findOne({
                username
            });

            if (!user) {
                return;
            }
            
            userToSocket.set(user, socket);
            socketToUser.set(socket, user);
            mms.matchmaker.push(user);

        } catch (e) {

        }

    });

    socket.on('ready', (data)=>{
        for(i=0; i<4; i++){
            if(data.id == 0){
                socket.units[i] = data.team[i];
            }
            if(data.id == 1){
                socket.units[i+4] = data.team[i];
            }
        }
        socket.to(socket.roomID).emit('another player ready', {team: data.team, id: data.id})
    });

    socket.on('set unit', (data)=>{
        for(i=0; i<4; i++){
            if(data.id == 0){
                socket.units[i] = data.team[i];
            }
            if(data.id == 1){
                socket.units[i+4] = data.team[i];
            }      
        }
    });

    socket.on('start game', (player)=> {
        socket.emit('place units', {units: socket.units, player: player});
    })

    socket.on('update positions', function (data) { 
        console.log('update position')
        console.log(data)
        socket.to(data.room).emit('update enemy positions', data);
    });

    socket.on('give damage', function(data){
        socket.stats.dmg_dealt += data.damage;
        socket.to(data.room).emit('get damage', data);
    })

    socket.on('death confirmed', () => {
        var clients = roomToSockets.get(socket.roomID);
        // console.log(clients);
        for (var i=0; i<clients.length; i++) {
            var client = clients[i];
            // console.log(client);
            if (client.id == socket.id)
                client.stats.deaths += 1;
            else
                client.stats.kills +=1;
        } 
    })

    socket.on('end turn', (data) => {
        socket.stats.turns += 1;
        socket.stats.avg_turn_time = (socket.stats.avg_turn_time * (socket.stats.turns - 1) + data.turn_time) / socket.stats.turns;
        socket.stats.clicks += data.clicks;
        socket.stats.clicks_avg = socket.stats.clicks / socket.stats.turns;
        socket.to(data.room).emit('start turn');
    })

    socket.on('surrender', (data)=>{
        var socket_winner, socket_loser;

        var clients = roomToSockets.get(socket.roomID);
        // console.log(clients);
        for (var i=0; i<clients.length; i++) {
            var client = clients[i];
            // console.log(client);
            if (client.id == socket.id)
                socket_winner = client;
            else
                socket_loser = client;
        }
        
        var winner = socketToUser.get(socket_winner);
        var loser = socketToUser.get(socket_loser);

        winner.playedGames++;
        loser.playedGames++;

        // console.log(socket_winner.stats);
        // console.log(socket_loser.stats);

        mms.mmrCalc(winner, loser, socket_winner.stats, socket_loser.stats);

        console.log(winner.mmr);
        console.log(loser.mmr);

        winner.save();
        loser.save();

        socket.to(data.room).emit('victory');

        socket_winner.leave(socket_winner.roomID);
        socket_loser.leave(socket_loser.roomID);

    })

    socket.on('disconnect', function(){
        socket.to(socket.roomID).emit('user disconnected'); 
    });
});

// Upon finding a pair of players to match, connect them to a room
// might need to relocate
mms.matchmaker.on('match', (result) => {
    // put the two players together in a game
    var socket_1 = userToSocket.get(result.a);
    var socket_2 = userToSocket.get(result.b);

    socket_1.playerColor = "red";
    socket_2.playerColor = "blue";
    socket_1.roomID = "room"+rooms;
    socket_2.roomID = "room"+rooms;
    socket_1.units = [];
    socket_2.units = [];
    rooms++;

    socket_1.stats = {
        kills: 0,
        deaths: 0,
        kd_ratio: 0,
        dmg_dealt: 0,
        turns: 0,
        avg_turn_time: 0,
        clicks: 0,
        clicks_avg: 0,
    };
    socket_2.stats = {
        kills: 0,
        deaths: 0,
        kd_ratio: 0,
        dmg_dealt: 0,
        turns: 0,
        avg_turn_time: 0,
        clicks: 0,
        clicks_avg: 0,
    };
    // var player = {
    //     id: playerID % 2,
    //     color: socket.playerColor,
    //     room: socket.roomID 
    // };
    socket_1.join(socket_1.roomID);
    socket_2.join(socket_2.roomID);
    roomToSockets.set(socket_1.roomID, [socket_1, socket_2]);
    socket_1.emit('initialize player', {id: 0, color: socket_1.playerColor, room: socket_1.roomID});
    socket_2.emit('initialize player', {id: 1, color: socket_2.playerColor, room: socket_2.roomID});
    // socket.broadcast.to(rooms).emit('foundGame', {});
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}



/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
